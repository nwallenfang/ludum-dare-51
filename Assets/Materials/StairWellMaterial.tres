[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://Assets/Materials/concrete_wall/concrete_wall_albedo.png" type="Texture" id=1]
[ext_resource path="res://Assets/Materials/concrete_wall/concrete_wall_normal.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset;


void vertex() {
   	// Get the worldspace normal after transformation, and ensure it's unit th.
   	vec3 worldspace_normal = normalize(mat3(WORLD_MATRIX) * NORMAL);

    // Pick a direction for our texture's vertical \"v\" axis. 
    // Default for floors/ceilings:
   	vec3 v_direction = vec3(0, 0, 1);

    // For non-horizontal planes, we'll choose
    // the closest vector in the polygon's plane to world up.
    if(abs(worldspace_normal.y) < 1.0f) {
            v_direction = normalize(vec3(0, 1, 0) - worldspace_normal.y * worldspace_normal);
    }

    // Get the perpendicular in-plane vector to use as our \"u\" direction.
    vec3 h_direction = normalize(cross(worldspace_normal, v_direction));

    // Get the position of the vertex in worldspace.
    vec3 world_pos = mat3(WORLD_MATRIX) * VERTEX;

    // Project the worldspace position of the vertex into our texturing plane,
    // and use this result as the primary texture coordinate.
    UV = uv_scale * vec2(dot(world_pos, h_direction), dot(world_pos, v_direction));
//	UV=UV*uv1_scale.xy+uv1_offset.xy;
}



void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 0.5
shader_param/uv_scale = Vector2( 0.2, 0.2 )
shader_param/uv_offset = null
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_normal = ExtResource( 2 )
