[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://Assets/Sprites/banana.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded,depth_test_disable;
uniform vec4 albedo1 : hint_color;
uniform vec4 albedo2 : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float alpha_scissor_threshold;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D noise;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
}



uniform int pixelSize = 4;
void fragment() {
	
//	vec2 size = VIEWPORT_SIZE;
//
//	float xRes = size.x;
//	float yRes = size.y;
//
//	float xFactor = float(xRes) / float(pixelSize);
//	float yFactor = float(yRes) / float(pixelSize);
//
//	float grid_uv_x = round(UV.x * xFactor) / xFactor;
//	float grid_uv_y = round(UV.y * yFactor) / yFactor;
	
//	vec4 albedo_tex = texture(texture_albedo, vec2(grid_uv_x, grid_uv_y));
	vec4 albedo_tex = texture(texture_albedo,UV);
	ALBEDO = mix(albedo1.rgb, albedo2.rgb, texture(noise, UV + vec2(0.7, 0.7) * 0.13 * TIME).r) * albedo_tex.rgb;
	ALPHA = albedo_tex.a;
	ALPHA_SCISSOR=alpha_scissor_threshold;
}
"

[sub_resource type="OpenSimplexNoise" id=2]
seed = 178
octaves = 1
period = 13.6
lacunarity = 2.34

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/albedo1 = Color( 0.84, 0.7861, 0.1932, 1 )
shader_param/albedo2 = Color( 0.670588, 0.356863, 0.133333, 1 )
shader_param/alpha_scissor_threshold = 0.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/pixelSize = 4
shader_param/texture_albedo = ExtResource( 1 )
shader_param/noise = SubResource( 3 )
