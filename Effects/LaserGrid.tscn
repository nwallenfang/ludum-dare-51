[gd_scene load_steps=5 format=2]

[ext_resource path="res://Effects/LaserGrid.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;

varying vec4 wrld_vertex;

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
    value = clamp(value, istart, istop);
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
}


void vertex() {
	wrld_vertex = WORLD_MATRIX * vec4(VERTEX, 1.0);
}

void fragment() {
	float grid_size = 1.9;
	
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	float dist_to_grid_x = abs(mod(wrld_vertex.x, grid_size) - grid_size * .5);
	float dist_to_grid_z = abs(mod(wrld_vertex.z, grid_size) - grid_size * .5);
	float dist_to_grid = min(dist_to_grid_x, dist_to_grid_z);
	
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALBEDO = mix(ALBEDO, vec3(1.0), float(dist_to_grid<.03));
	EMISSION = albedo.rgb * float(dist_to_grid<.03) * 10.0;
	ALPHA = pow(clamp_and_map(dist_to_grid, .01, .09 + .13* noise(vec2(wrld_vertex.x + TIME * 0.8, wrld_vertex.z + TIME * .5)), 1.0, 0.0), 3.0);
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 0, 0.0235294, 1 )

[sub_resource type="PlaneMesh" id=3]

[node name="LaserGrid" type="Spatial"]
transform = Transform( 6.23843, 0, 0, 0, 1, 0, 0, 0, 6.23843, 0, 0, 0 )
visible = false
script = ExtResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( -6.70917, 0, 0, 0, 1, 0, 0, 0, -6.70917, 0, 0, 0 )
material_override = SubResource( 2 )
use_in_baked_light = true
mesh = SubResource( 3 )
